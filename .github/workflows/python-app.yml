# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Lint/Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    - run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        python3 -m unittest

  tag-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version from conventional commits
      id: version
      run: |
        # Get current version from git tags
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        CURRENT_VERSION=${CURRENT_VERSION#v}  # Remove 'v' prefix
        
        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
                 # Determine version bump based on commit type
         if echo "$COMMIT_MSG" | grep -q "^BREAKING CHANGE:" || echo "$COMMIT_MSG" | grep -q "^major:"; then
           VERSION="major"
           NEW_MAJOR=$((MAJOR + 1))
           NEW_MINOR=0
           NEW_PATCH=0
         elif echo "$COMMIT_MSG" | grep -q "^feat:" || echo "$COMMIT_MSG" | grep -q "^minor:"; then
           VERSION="minor"
           NEW_MAJOR=$MAJOR
           NEW_MINOR=$((MINOR + 1))
           NEW_PATCH=0
         elif echo "$COMMIT_MSG" | grep -q "^fix:" || echo "$COMMIT_MSG" | grep -q "^patch:"; then
           VERSION="patch"
           NEW_MAJOR=$MAJOR
           NEW_MINOR=$MINOR
           NEW_PATCH=$((PATCH + 1))
         else
           VERSION="patch"
           NEW_MAJOR=$MAJOR
           NEW_MINOR=$MINOR
           NEW_PATCH=$((PATCH + 1))
         fi
        
        NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "bump_type=$VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Recommended version bump: $VERSION ($CURRENT_VERSION -> $NEW_VERSION)"
    
    - name: Check if version bump is needed
      id: check_version
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
        
                 # Check if this is a conventional commit that should trigger a version bump
         if echo "$COMMIT_MSG" | grep -q "^feat:" || echo "$COMMIT_MSG" | grep -q "^fix:" || echo "$COMMIT_MSG" | grep -q "^BREAKING CHANGE:" || echo "$COMMIT_MSG" | grep -q "^major:" || echo "$COMMIT_MSG" | grep -q "^minor:" || echo "$COMMIT_MSG" | grep -q "^patch:"; then
           echo "needs_tag=true" >> $GITHUB_OUTPUT
           echo "This commit should trigger a version bump"
         else
           echo "needs_tag=false" >> $GITHUB_OUTPUT
           echo "This commit doesn't need a version bump"
         fi
    
    - name: Create and push tag
      if: steps.check_version.outputs.needs_tag == 'true'
      run: |
        # Get the new version
        NEW_VERSION="${{ steps.version.outputs.version }}"
        
        # Create the tag
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        
        # Push the tag
        git push origin "v$NEW_VERSION"
        
        echo "Created and pushed tag v$NEW_VERSION"
    
    - name: Skip tagging
      if: steps.check_version.outputs.needs_tag == 'false'
      run: |
        echo "Skipping tag creation - commit doesn't follow conventional commit format"
        echo "Commit message: ${{ steps.check_version.outputs.commit_msg }}"
